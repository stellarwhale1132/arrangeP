<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>圖文整合工具</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
</head>
<body>
    <header class="author-banner">
        <p>BY stellarwhale1132 鯨</p>
    </header>

    <div class="container">
        <aside class="sidebar">
            <h2>管理面板</h2>
            <div class="sidebar-section">
                <button id="export-data-btn" class="sidebar-btn"><i class="fa-solid fa-file-export"></i> 匯出備份 (.json)</button>
                <button id="import-data-btn" class="sidebar-btn"><i class="fa-solid fa-file-import"></i> 匯入備份 (.json)</button>
                <input type="file" id="import-file-input" accept=".json" style="display: none;">
            </div>

            <div class="sidebar-section">
                <h3>分類</h3>
                <ul id="category-list" class="filter-list">
                    <li data-category="all" class="active">全部圖片</li>
                    <li data-category="favorites"><i class="fa-solid fa-star"></i> 我的最愛</li>
                    <li data-category="uncategorized">未分類</li>
                </ul>
                <div class="add-category-form">
                    <input type="text" id="new-category-input" placeholder="新增分類名稱...">
                    <button id="add-category-btn"><i class="fa-solid fa-plus"></i></button>
                </div>
            </div>

            <div class="sidebar-section">
                <h3>標籤</h3>
                <div id="tag-list" class="tag-cloud">
                    </div>
            </div>

            <div class="theme-switcher">
                <span>日間模式</span>
                <label class="switch">
                    <input type="checkbox" id="theme-toggle">
                    <span class="slider round"></span>
                </label>
                <span>夜間模式</span>
            </div>
        </aside>

        <main class="main-content">
            <div class="add-item-area" id="drop-zone">
                <h3>新增項目</h3>
                <p>選擇檔案或直接將圖片貼上 (Ctrl+V) / 拖曳到此處</p>
                <input type="file" id="image-upload" accept="image/*" style="display: none;">
                <button id="upload-btn" class="main-btn"><i class="fa-solid fa-upload"></i> 選擇圖片</button>
                
                <div class="input-group">
                    <label for="note-input">備註文字 (例如 AI Prompt)</label>
                    <textarea id="note-input" rows="4" placeholder="在這裡輸入備註..."></textarea>
                </div>
                <div class="input-group">
                    <label for="tag-input">標籤 (用逗號 , 分隔)</label>
                    <input type="text" id="tag-input" placeholder="例如: 風景, 夜晚, Niji">
                </div>
                <button id="add-item-btn" class="main-btn">新增</button>
            </div>

            <div id="image-grid">
                </div>
        </main>
    </div>

    <div id="edit-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2>編輯項目</h2>
            <input type="hidden" id="edit-id-input">
            <div class="input-group">
                <label for="edit-note-input">備註文字</label>
                <textarea id="edit-note-input" rows="5"></textarea>
            </div>
            <div class="input-group">
                <label for="edit-tag-input">標籤 (用逗號 , 分隔)</label>
                <input type="text" id="edit-tag-input">
            </div>
             <div class="input-group">
                <label for="edit-category-select">移動到分類</label>
                <select id="edit-category-select"></select>
            </div>
            <button id="save-edit-btn" class="main-btn">儲存變更</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
    <script src="script.js"></script>
</body>
</html>                document.addEventListener('DOMContentLoaded', () => {
                    // --- DOM 元素獲取 ---
                    const imageGrid = document.getElementById('image-grid');
                    const uploadBtn = document.getElementById('upload-btn');
                    const imageUpload = document.getElementById('image-upload');
                    const noteInput = document.getElementById('note-input');
                    const tagInput = document.getElementById('tag-input');
                    const addItemBtn = document.getElementById('add-item-btn');
                    const dropZone = document.getElementById('drop-zone');

                    const categoryList = document.getElementById('category-list');
                    const newCategoryInput = document.getElementById('new-category-input');
                    const addCategoryBtn = document.getElementById('add-category-btn');
                    const tagListContainer = document.getElementById('tag-list');

                    const exportBtn = document.getElementById('export-data-btn');
                    const importBtn = document.getElementById('import-data-btn');
                    const importFileInput = document.getElementById('import-file-input');

                    const themeToggle = document.getElementById('theme-toggle');

                    const editModal = document.getElementById('edit-modal');
                    const closeModalBtn = document.querySelector('.close-btn');
                    const saveEditBtn = document.getElementById('save-edit-btn');
                    const editIdInput = document.getElementById('edit-id-input');
                    const editNoteInput = document.getElementById('edit-note-input');
                    const editTagInput = document.getElementById('edit-tag-input');
                    const editCategorySelect = document.getElementById('edit-category-select');

                    // --- 應用程式狀態管理 ---
                    let items = []; // 儲存所有圖片項目
                    let categories = ['預設分類']; // 儲存所有分類
                    let currentFilter = { type: 'all', value: 'all' }; // 當前篩選器

                    // --- 初始化 SortableJS 實現拖曳排序 (已優化) ---
                    let sortable = new Sortable(imageGrid, {
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        handle: '.drag-handle', // 指定只有這個 class 的元素才能觸發拖曳
                        onEnd: (evt) => {
                            const movedItem = items.find(item => item.id === evt.item.dataset.id);
                            if (!movedItem) return;

                            // 從原始位置刪除
                            items = items.filter(item => item.id !== evt.item.dataset.id);
                            // 插入到新位置
                            items.splice(evt.newIndex, 0, movedItem);

                            saveData();
                            // 注意：拖曳後不需要重新渲染整個畫面，避免閃爍
                        },
                    });

                    // --- 資料處理函式 ---

                    // 儲存資料到 localStorage
                    const saveData = () => {
                        const appData = {
                            items,
                            categories
                        };
                        localStorage.setItem('imageDataApp', JSON.stringify(appData));
                    };

                    // 從 localStorage 載入資料
                    const loadData = () => {
                        const savedData = localStorage.getItem('imageDataApp');
                        if (savedData) {
                            const appData = JSON.parse(savedData);
                            items = appData.items || [];
                            categories = appData.categories || ['預設分類'];
                        }
                    };

                    // --- 渲染函式 (將資料顯示在畫面上) ---

                    // 渲染所有項目 (圖片卡片)
                    const renderItems = () => {
                        imageGrid.innerHTML = ''; // 清空現有內容

                        const filteredItems = items.filter(item => {
                            if (currentFilter.type === 'all') return true;
                            if (currentFilter.type === 'favorites') return item.isFavorite;
                            if (currentFilter.type === 'uncategorized') return !item.category || item.category === "預設分類";
                            if (currentFilter.type === 'category') return item.category === currentFilter.value;
                            if (currentFilter.type === 'tag') return item.tags.includes(currentFilter.value);
                            return false;
                        });

                        filteredItems.forEach(item => {
                            const card = document.createElement('div');
                            card.className = 'image-card';
                            card.dataset.id = item.id;

                            const tagsHTML = item.tags.map(tag => `<span class="tag">${tag}</span>`).join('');

                            // 使用包含拖曳手柄的新版 HTML 模板
                            card.innerHTML = `
                                <img src="${item.imageData}" alt="Image">
                                <i class="fa-solid fa-star favorite-btn ${item.isFavorite ? 'is-favorite' : ''}"></i>
                                <div class="card-content">
                                    <p class="card-note">${item.note || '<i>無備註</i>'}</p>
                                    <div class="card-tags">${tagsHTML}</div>
                                    <div class="card-actions">
                                        <i class="fa-solid fa-grip-vertical drag-handle" title="按住拖曳排序"></i>
                                        <div class="action-buttons-group">
                                            <button class="action-btn btn-copy" title="複製備註"><i class="fa-solid fa-copy"></i></button>
                                            <button class="action-btn btn-edit" title="編輯"><i class="fa-solid fa-pencil"></i></button>
                                            <button class="action-btn btn-delete" title="刪除"><i class="fa-solid fa-trash"></i></button>
                                        </div>
                                    </div>
                                </div>
                            `;
                            imageGrid.appendChild(card);
                        });
                    };

                    // 渲染分類列表
                    const renderCategories = () => {
                        const customCategories = categoryList.querySelectorAll('li:not([data-category="all"]):not([data-category="favorites"]):not([data-category="uncategorized"])');
                        customCategories.forEach(li => li.remove());

                        const favoritesLi = categoryList.querySelector('li[data-category="favorites"]');

                        categories.forEach(cat => {
                            if (cat !== "預設分類") {
                                const li = document.createElement('li');
                                li.dataset.category = cat;
                                li.textContent = cat;
                                categoryList.insertBefore(li, favoritesLi.nextSibling);
                            }
                        });
                        updateActiveFilter();
                    };

                    // 渲染標籤雲
                    const renderTags = () => {
                        const allTags = new Set(items.flatMap(item => item.tags));
                        tagListContainer.innerHTML = '';
                        allTags.forEach(tag => {
                            const tagEl = document.createElement('span');
                            tagEl.className = 'tag';
                            tagEl.dataset.tag = tag;
                            tagEl.textContent = tag;
                            tagListContainer.appendChild(tagEl);
                        });
                         updateActiveFilter();
                    };

                    // 更新篩選器高亮狀態
                    const updateActiveFilter = () => {
                        document.querySelectorAll('.filter-list li, .tag-cloud .tag').forEach(el => {
                            el.classList.remove('active');
                            const type = el.dataset.category ? 'category' : 'tag';
                            const value = el.dataset.category || el.dataset.tag;

                            if ((currentFilter.type === 'all' && value === 'all') ||
                                (currentFilter.type === 'favorites' && value === 'favorites') ||
                                (currentFilter.type === 'uncategorized' && value === 'uncategorized') ||
                                (currentFilter.type === type && currentFilter.value === value)) {
                                el.classList.add('active');
                            }
                        });
                    };

                    // 刷新整個應用程式畫面
                    const refreshApp = () => {
                        renderCategories();
                        renderTags();
                        renderItems();
                    };

                    // --- 核心功能函式 ---

                    const handleFile = (file) => {
                        if (!file || !file.type.startsWith('image/')) return;

                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const note = noteInput.value.trim();
                            const tags = tagInput.value.trim().split(/[,，\s]+/).filter(Boolean);

                            const newItem = {
                                id: Date.now().toString(),
                                imageData: e.target.result,
                                note: note,
                                tags: tags,
                                isFavorite: false,
                                category: '預設分類'
                            };

                            items.unshift(newItem);
                            saveData();
                            refreshApp();

                            noteInput.value = '';
                            tagInput.value = '';
                            imageUpload.value = '';
                        };
                        reader.readAsDataURL(file);
                    };

                    const handlePaste = (e) => {
                        const clipboardItems = (e.clipboardData || e.originalEvent.clipboardData).items;
                        for (const item of clipboardItems) {
                            if (item.kind === 'file' && item.type.startsWith('image/')) {
                                const file = item.getAsFile();

                                const reader = new FileReader();
                                reader.onload = (event) => {
                                    const newItem = {
                                        id: Date.now().toString(),
                                        imageData: event.target.result,
                                        note: '',
                                        tags: [],
                                        isFavorite: false,
                                        category: '預設分類'
                                    };

                                    items.unshift(newItem);
                                    saveData();
                                    refreshApp();
                                };
                                reader.readAsDataURL(file);
                                e.preventDefault();
                                break;
                            }
                        }
                    };

                    // --- 事件監聽器 ---

                    uploadBtn.addEventListener('click', () => imageUpload.click());
                    imageUpload.addEventListener('change', (e) => {
                        if (e.target.files.length > 0) handleFile(e.target.files[0]);
                    });
                    addItemBtn.addEventListener('click', () => {
                        if (imageUpload.files.length > 0) {
                            handleFile(imageUpload.files[0]);
                        } else alert('請先選擇一張圖片！');
                    });
                    window.addEventListener('paste', handlePaste);
                    dropZone.addEventListener('dragover', (e) => e.preventDefault());
                    dropZone.addEventListener('drop', (e) => {
                        e.preventDefault();
                        if (e.dataTransfer.files.length > 0) handleFile(e.dataTransfer.files[0]);
                    });

                    imageGrid.addEventListener('click', (e) => {
                        const target = e.target.closest('button.action-btn, .favorite-btn');
                        if (!target) return;

                        const card = target.closest('.image-card');
                        const id = card.dataset.id;

                        if (target.classList.contains('btn-copy')) {
                            const noteToCopy = items.find(item => item.id === id)?.note || '';
                            navigator.clipboard.writeText(noteToCopy).then(() => alert('備註已複製！'));
                        }

                        if (target.classList.contains('btn-delete')) {
                            if (confirm('確定要刪除這個項目嗎？')) {
                                items = items.filter(item => item.id !== id);
                                saveData();
                                refreshApp();
                            }
                        }

                        if (target.classList.contains('btn-edit')) {
                            const item = items.find(item => item.id === id);
                            if(item) {
                                editIdInput.value = id;
                                editNoteInput.value = item.note;
                                editTagInput.value = item.tags.join(', ');

                                editCategorySelect.innerHTML = '';
                                ['預設分類', ...categories.filter(c => c !== '預設分類')].forEach(cat => {
                                    const option = document.createElement('option');
                                    option.value = cat;
                                    option.textContent = cat;
                                    if (item.category === cat) option.selected = true;
                                    editCategorySelect.appendChild(option);
                                });

                                editModal.style.display = 'flex';
                            }
                        }

                        if (target.classList.contains('favorite-btn')) {
                            const item = items.find(item => item.id === id);
                            if (item) {
                                item.isFavorite = !item.isFavorite;
                                saveData();
                                refreshApp();
                            }
                        }
                    });

                    closeModalBtn.addEventListener('click', () => editModal.style.display = 'none');
                    window.addEventListener('click', (e) => {
                        if (e.target === editModal) editModal.style.display = 'none';
                    });

                    saveEditBtn.addEventListener('click', () => {
                        const id = editIdInput.value;
                        const item = items.find(item => item.id === id);
                        if(item) {
                            item.note = editNoteInput.value.trim();
                            item.tags = editTagInput.value.trim().split(/[,，\s]+/).filter(Boolean);
                            item.category = editCategorySelect.value;
                            saveData();
                            refreshApp();
                            editModal.style.display = 'none';
                        }
                    });

                    addCategoryBtn.addEventListener('click', () => {
                        const newCategory = newCategoryInput.value.trim();
                        if (newCategory && !categories.includes(newCategory) && newCategory !== '預設分類') {
                            categories.push(newCategory);
                            saveData();
                            renderCategories();
                            newCategoryInput.value = '';
                        } else if (!newCategory) {
                            alert('分類名稱不能為空！');
                        } else {
                            alert('該分類已存在！');
                        }
                    });
                    newCategoryInput.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter') addCategoryBtn.click();
                    });

                    categoryList.addEventListener('click', (e) => {
                        if (e.target.tagName === 'LI') {
                            const category = e.target.dataset.category;
                            if (['favorites', 'uncategorized', 'all'].includes(category)) {
                                currentFilter = { type: category, value: category };
                            } else {
                                currentFilter = { type: 'category', value: category };
                            }
                            updateActiveFilter();
                            renderItems();
                        }
                    });

                    tagListContainer.addEventListener('click', (e) => {
                         if (e.target.classList.contains('tag')) {
                            const tag = e.target.dataset.tag;
                            if(currentFilter.type === 'tag' && currentFilter.value === tag) {
                                currentFilter = { type: 'all', value: 'all' };
                            } else {
                                currentFilter = { type: 'tag', value: tag };
                            }
                            updateActiveFilter();
                            renderItems();
                        }
                    });

                    exportBtn.addEventListener('click', () => {
                        if (items.length === 0) return alert('沒有資料可以匯出。');
                        const dataStr = JSON.stringify({ items, categories });
                        const dataBlob = new Blob([dataStr], { type: 'application/json' });
                        const url = URL.createObjectURL(dataBlob);
                        const a = document.createElement('a');
                        a.href = url;
                        const timestamp = new Date().toISOString().slice(0, 19).replace('T', '_').replace(/:/g, '-');
                        a.download = `image_data_backup_${timestamp}.json`;
                        a.click();
                        URL.revokeObjectURL(url);
                    });

                    importBtn.addEventListener('click', () => importFileInput.click());
                    importFileInput.addEventListener('change', (e) => {
                        const file = e.target.files[0];
                        if (file) {
                            if (!confirm('匯入將會覆蓋現有所有資料，確定要繼續嗎？')) {
                                e.target.value = '';
                                return;
                            }
                            const reader = new FileReader();
                            reader.onload = (event) => {
                                try {
                                    const importedData = JSON.parse(event.target.result);
                                    if (importedData.items && importedData.categories) {
                                        items = importedData.items;
                                        categories = importedData.categories;
                                        saveData();
                                        refreshApp();
                                        alert('資料匯入成功！');
                                    } else alert('檔案格式不正確。');
                                } catch (err) {
                                    alert('讀取檔案失敗，請確認檔案為正確的 JSON 格式。');
                                } finally {
                                    e.target.value = '';
                                }
                            };
                            reader.readAsText(file);
                        }
                    });

                    themeToggle.addEventListener('change', () => {
                        document.body.classList.toggle('dark-mode', themeToggle.checked);
                        localStorage.setItem('theme', themeToggle.checked ? 'dark' : 'light');
                    });

                    const loadTheme = () => {
                        const savedTheme = localStorage.getItem('theme');
                        if (savedTheme === 'dark') {
                            document.body.classList.add('dark-mode');
                            themeToggle.checked = true;
                        } else {
                            document.body.classList.remove('dark-mode');
                            themeToggle.checked = false;
                        }
                    };

                    // --- 應用程式啟動 ---
                    loadData();
                    loadTheme();
                    refreshApp();
                });  /* --- CSS 變數定義 --- */
  :root {
      --primary-color: #007bff;
      --secondary-color: #6c757d;
      --background-color: #f8f9fa;
      --surface-color: #ffffff;
      --text-color: #212529;
      --border-color: #dee2e6;
      --shadow-color: rgba(0, 0, 0, 0.1);
      --success-color: #28a745;
      --danger-color: #dc3545;
      --favorite-color: #ffc107;
  }

  /* --- 夜間模式變數 --- */
  body.dark-mode {
      --primary-color: #3b82f6;
      --secondary-color: #9ca3af;
      --background-color: #111827;
      --surface-color: #1f2937;
      --text-color: #f9fafb;
      --border-color: #4b5563;
      --shadow-color: rgba(0, 0, 0, 0.3);
  }

  /* --- 全域樣式 --- */
  * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
  }

  body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      transition: background-color 0.3s, color 0.3s;
      line-height: 1.6;
  }

  .author-banner {
      background-color: var(--primary-color);
      color: white;
      text-align: center;
      padding: 8px 0;
      font-weight: bold;
  }

  .container {
      display: flex;
      height: calc(100vh - 40px);
  }

  /* --- 側邊欄 --- */
  .sidebar {
      width: 280px;
      background-color: var(--surface-color);
      padding: 20px;
      border-right: 1px solid var(--border-color);
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 20px;
  }

  .sidebar h2, .sidebar h3 {
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 10px;
      margin-bottom: 10px;
  }

  .sidebar-section {
      display: flex;
      flex-direction: column;
      gap: 10px;
  }

  .sidebar-btn {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border-color);
      background-color: transparent;
      color: var(--text-color);
      cursor: pointer;
      border-radius: 5px;
      text-align: left;
      transition: background-color 0.2s;
  }

  .sidebar-btn:hover {
      background-color: var(--border-color);
  }

  .filter-list {
      list-style: none;
  }

  .filter-list li {
      padding: 8px 12px;
      cursor: pointer;
      border-radius: 5px;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: background-color 0.2s;
  }

  .filter-list li:hover {
      background-color: var(--border-color);
  }

  .filter-list li.active {
      background-color: var(--primary-color);
      color: white;
      font-weight: bold;
  }

  .add-category-form {
      display: flex;
  }

  .add-category-form input {
      flex-grow: 1;
      border: 1px solid var(--border-color);
      padding: 8px;
      border-radius: 5px 0 0 5px;
      background-color: var(--background-color);
      color: var(--text-color);
  }

  .add-category-form button {
      padding: 8px 12px;
      border: 1px solid var(--primary-color);
      background-color: var(--primary-color);
      color: white;
      cursor: pointer;
      border-radius: 0 5px 5px 0;
  }

  .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
  }

  .tag {
      background-color: var(--secondary-color);
      color: white;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      cursor: pointer;
      transition: transform 0.2s;
  }

  .tag:hover {
      transform: scale(1.1);
  }

  .tag.active {
      background-color: var(--primary-color);
      box-shadow: 0 0 5px var(--primary-color);
  }


  /* --- 主內容區 --- */
  .main-content {
      flex-grow: 1;
      padding: 20px;
      overflow-y: auto;
  }

  .add-item-area {
      background-color: var(--surface-color);
      padding: 20px;
      border-radius: 8px;
      border: 2px dashed var(--border-color);
      margin-bottom: 20px;
      text-align: center;
  }

  .input-group {
      margin: 15px 0;
      text-align: left;
  }

  .input-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
  }

  #note-input, #tag-input, #edit-note-input, #edit-tag-input {
      width: 100%;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid var(--border-color);
      background-color: var(--background-color);
      color: var(--text-color);
      font-size: 1rem;
  }
  #edit-category-select {
      width: 100%;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid var(--border-color);
      background-color: var(--background-color);
      color: var(--text-color);
      font-size: 1rem;
  }

  .main-btn {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      transition: opacity 0.2s;
  }

  .main-btn:hover {
      opacity: 0.9;
  }


  /* --- 圖片網格 --- */
  #image-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
  }

  .image-card {
      background-color: var(--surface-color);
      border-radius: 8px;
      box-shadow: 0 2px 5px var(--shadow-color);
      overflow: hidden;
      position: relative;
      cursor: default; /* 改為預設，因為拖曳由手柄控制 */
      transition: transform 0.2s ease-in-out;
  }

  .image-card img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      display: block;
  }

  .image-card .card-content {
      padding: 15px;
  }

  .card-note {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      margin-bottom: 10px;
      min-height: 24px; /* 確保即使沒文字也有高度 */
  }

  .card-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 5px;
      min-height: 22px; /* 確保即使沒標籤也有高度 */
      margin-bottom: 10px;
  }
  .card-tags .tag {
      font-size: 0.7em;
      pointer-events: none; /* 卡片上的標籤不可點 */
  }

  .card-actions {
      display: flex;
      justify-content: space-between;
      align-items: center; /* 新增：讓手柄和按鈕垂直對齊 */
  }

  .drag-handle {
      font-size: 1.5rem;
      color: var(--border-color);
      cursor: grab;
      padding: 5px;
      transition: color 0.2s;
  }
  .drag-handle:hover {
      color: var(--primary-color);
  }
  .drag-handle:active {
      cursor: grabbing;
  }

  .action-buttons-group {
      display: flex;
      gap: 5px;
  }

  .action-btn {
      background: none;
      border: none;
      color: var(--secondary-color);
      cursor: pointer;
      font-size: 1.2rem;
      padding: 5px;
      transition: color 0.2s;
  }

  .action-btn:hover {
      color: var(--primary-color);
  }
  .btn-delete:hover {
      color: var(--danger-color);
  }

  .favorite-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 1.5rem;
      color: rgba(255, 255, 255, 0.7);
      text-shadow: 0 1px 3px rgba(0,0,0,0.5);
      cursor: pointer;
      transition: color 0.2s, transform 0.2s;
  }

  .favorite-btn.is-favorite {
      color: var(--favorite-color);
  }
  .favorite-btn:hover {
      transform: scale(1.2);
  }

  /* 拖曳時的佔位符樣式 */
  .sortable-ghost {
      opacity: 0.4;
      border: 2px dashed var(--primary-color);
      background-color: var(--border-color);
  }


  /* --- 彈出視窗 (Modal) --- */
  .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.6);
      align-items: center;
      justify-content: center;
  }

  .modal-content {
      background-color: var(--surface-color);
      margin: auto;
      padding: 20px;
      border: 1px solid var(--border-color);
      width: 90%;
      max-width: 500px;
      border-radius: 8px;
      position: relative;
      box-shadow: 0 5px 15px var(--shadow-color);
  }

  .close-btn {
      color: var(--secondary-color);
      position: absolute;
      top: 10px;
      right: 20px;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
  }

  .close-btn:hover,
  .close-btn:focus {
      color: var(--text-color);
  }

  /* --- 日夜模式切換開關 --- */
  .theme-switcher {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin-top: auto; /* 將其推到側邊欄底部 */
      padding-top: 20px;
      border-top: 1px solid var(--border-color);
  }
  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  .switch input { 
    opacity: 0;
    width: 0;
    height: 0;
  }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
  }
  input:checked + .slider {
    background-color: var(--primary-color);
  }
  input:checked + .slider:before {
    transform: translateX(26px);
  }
  .slider.round {
    border-radius: 34px;
  }
  .slider.round:before {
    border-radius: 50%;
  }
